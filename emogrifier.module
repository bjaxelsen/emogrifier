<?php
/**
 * @file
 * Hook implementations for emogrifier module.
 */

use Pelago\Emogrifier;
use Drupal\emogrifier\Render\EmogrifierMarkup;

/**
 * Implements hook_mail_alter().
 */
function emogrifier_mail_alter(&$message) {
  // @todo Make the interaction mechanism configurable
  if (isset($message['body']['body']) && is_subclass_of($message['body']['body'], '\Drupal\Component\Render\MarkupInterface')) {
    $css = emogrifier_default_theme_css();
    $emogrifier = new Emogrifier();
    $emogrifier->setHtml((string) $message['body']['body']);
    $emogrifier->setCss($css);
    $message['body']['body'] = EmogrifierMarkup::create($emogrifier->emogrifyBodyContent());
  }
}

/**
 * Get current theme CSS.
 */
function emogrifier_default_theme_css() {
  // Store statically for improving cron job handling.
  static $css;

  if (!isset($css)) {
    // Fetch CSS from current default theme, if user is using admin theme,
    // we still want to use default theme.
    $config = \Drupal::config('system.theme');
    $themename = $config->get('default');
    $libraries = \Drupal::service('library.discovery')
      ->getLibrariesByExtension($themename);
    $css_optimizer = \Drupal::service('asset.css.optimizer');
    $css = '';
    // @todo support weight of css
    // Take globalstyling and mail css only,
    // not other libraries.
    $librarytypes = array('globalstyling', 'mail');
    foreach ($librarytypes as $librarytype) {
      if (isset($libraries[$librarytype]) && !empty($libraries[$librarytype]['css'])) {
        foreach ($libraries[$librarytype]['css'] as $cssfile) {
          // Skip css specific to print or screen.
          if (
            isset($cssfile['media']) &&
            ($cssfile['media'] == 'screen' || $cssfile['media'] == 'print')
          ) {
            continue;
          }
          // @todo support external CSS as well
          if ($cssfile['type'] == 'file') {
            $css .= $css_optimizer->loadFile($cssfile['data']) . " \n";
          }
        }
      }
    }
  }

  return $css;
}
